#ifndef _TABLE_H_
#define _TABLE_H_

/*

	各種テーブルをまとめています。
	(一部テーブル(配列)でないものもあります。)

*/

#include "position.h"
#include <array>
#include <vector>

// ----------------------------
//   ビット(bitboard)でない
// ----------------------------

// 純粋なビットに関するテーブル

// 立っているビットの数
// (インデックス: 0~0xff / 0~256)
const std::array<unsigned __int8, 0xff> COUNT_BIT{
	0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
};

// 立っているビットのインデックス配列
// (インデックス:0~0xff)
const std::array<std::vector<unsigned __int8>, 0xff> LOCATE_BIT{

	{},{ 0 },{ 1 },{ 0,1 },{ 2 },{ 0,2 },{ 1,2 },{ 0,1,2 },
	{ 3 },{ 0,3 },{ 1,3 },{ 0,1,3 },{ 2,3 },{ 0,2,3 },
	{ 1,2,3 },{ 0,1,2,3 },{ 4 },{ 0,4 },{ 1,4 },{ 0,1,4 },
	{ 2,4 },{ 0,2,4 },{ 1,2,4 },{ 0,1,2,4 },{ 3,4 },{ 0,3,4 },
	{ 1,3,4 },{ 0,1,3,4 },{ 2,3,4 },{ 0,2,3,4 },{ 1,2,3,4 },
	{ 0,1,2,3,4 },{ 5 },{ 0,5 },{ 1,5 },{ 0,1,5 },{ 2,5 },
	{ 0,2,5 },{ 1,2,5 },{ 0,1,2,5 },{ 3,5 },{ 0,3,5 },
	{ 1,3,5 },{ 0,1,3,5 },{ 2,3,5 },{ 0,2,3,5 },{ 1,2,3,5 },
	{ 0,1,2,3,5 },{ 4,5 },{ 0,4,5 },{ 1,4,5 },{ 0,1,4,5 },
	{ 2,4,5 },{ 0,2,4,5 },{ 1,2,4,5 },{ 0,1,2,4,5 },{ 3,4,5 },
	{ 0,3,4,5 },{ 1,3,4,5 },{ 0,1,3,4,5 },{ 2,3,4,5 },
	{ 0,2,3,4,5 },{ 1,2,3,4,5 },{ 0,1,2,3,4,5 },{ 6 },{ 0,6 },
	{ 1,6 },{ 0,1,6 },{ 2,6 },{ 0,2,6 },{ 1,2,6 },{ 0,1,2,6 },
	{ 3,6 },{ 0,3,6 },{ 1,3,6 },{ 0,1,3,6 },{ 2,3,6 },
	{ 0,2,3,6 },{ 1,2,3,6 },{ 0,1,2,3,6 },{ 4,6 },{ 0,4,6 },
	{ 1,4,6 },{ 0,1,4,6 },{ 2,4,6 },{ 0,2,4,6 },{ 1,2,4,6 },
	{ 0,1,2,4,6 },{ 3,4,6 },{ 0,3,4,6 },{ 1,3,4,6 },
	{ 0,1,3,4,6 },{ 2,3,4,6 },{ 0,2,3,4,6 },{ 1,2,3,4,6 },
	{ 0,1,2,3,4,6 },{ 5,6 },{ 0,5,6 },{ 1,5,6 },{ 0,1,5,6 },
	{ 2,5,6 },{ 0,2,5,6 },{ 1,2,5,6 },{ 0,1,2,5,6 },{ 3,5,6 },
	{ 0,3,5,6 },{ 1,3,5,6 },{ 0,1,3,5,6 },{ 2,3,5,6 },
	{ 0,2,3,5,6 },{ 1,2,3,5,6 },{ 0,1,2,3,5,6 },{ 4,5,6 },
	{ 0,4,5,6 },{ 1,4,5,6 },{ 0,1,4,5,6 },{ 2,4,5,6 },
	{ 0,2,4,5,6 },{ 1,2,4,5,6 },{ 0,1,2,4,5,6 },{ 3,4,5,6 },
	{ 0,3,4,5,6 },{ 1,3,4,5,6 },{ 0,1,3,4,5,6 },{ 2,3,4,5,6 },
	{ 0,2,3,4,5,6 },{ 1,2,3,4,5,6 },{ 0,1,2,3,4,5,6 },{ 7 },
	{ 0,7 },{ 1,7 },{ 0,1,7 },{ 2,7 },{ 0,2,7 },{ 1,2,7 },
	{ 0,1,2,7 },{ 3,7 },{ 0,3,7 },{ 1,3,7 },{ 0,1,3,7 },
	{ 2,3,7 },{ 0,2,3,7 },{ 1,2,3,7 },{ 0,1,2,3,7 },{ 4,7 },
	{ 0,4,7 },{ 1,4,7 },{ 0,1,4,7 },{ 2,4,7 },{ 0,2,4,7 },
	{ 1,2,4,7 },{ 0,1,2,4,7 },{ 3,4,7 },{ 0,3,4,7 },
	{ 1,3,4,7 },{ 0,1,3,4,7 },{ 2,3,4,7 },{ 0,2,3,4,7 },
	{ 1,2,3,4,7 },{ 0,1,2,3,4,7 },{ 5,7 },{ 0,5,7 },{ 1,5,7 },
	{ 0,1,5,7 },{ 2,5,7 },{ 0,2,5,7 },{ 1,2,5,7 },
	{ 0,1,2,5,7 },{ 3,5,7 },{ 0,3,5,7 },{ 1,3,5,7 },
	{ 0,1,3,5,7 },{ 2,3,5,7 },{ 0,2,3,5,7 },{ 1,2,3,5,7 },
	{ 0,1,2,3,5,7 },{ 4,5,7 },{ 0,4,5,7 },{ 1,4,5,7 },
	{ 0,1,4,5,7 },{ 2,4,5,7 },{ 0,2,4,5,7 },{ 1,2,4,5,7 },
	{ 0,1,2,4,5,7 },{ 3,4,5,7 },{ 0,3,4,5,7 },{ 1,3,4,5,7 },
	{ 0,1,3,4,5,7 },{ 2,3,4,5,7 },{ 0,2,3,4,5,7 },
	{ 1,2,3,4,5,7 },{ 0,1,2,3,4,5,7 },{ 6,7 },{ 0,6,7 },
	{ 1,6,7 },{ 0,1,6,7 },{ 2,6,7 },{ 0,2,6,7 },{ 1,2,6,7 },
	{ 0,1,2,6,7 },{ 3,6,7 },{ 0,3,6,7 },{ 1,3,6,7 },
	{ 0,1,3,6,7 },{ 2,3,6,7 },{ 0,2,3,6,7 },{ 1,2,3,6,7 },
	{ 0,1,2,3,6,7 },{ 4,6,7 },{ 0,4,6,7 },{ 1,4,6,7 },
	{ 0,1,4,6,7 },{ 2,4,6,7 },{ 0,2,4,6,7 },{ 1,2,4,6,7 },
	{ 0,1,2,4,6,7 },{ 3,4,6,7 },{ 0,3,4,6,7 },{ 1,3,4,6,7 },
	{ 0,1,3,4,6,7 },{ 2,3,4,6,7 },{ 0,2,3,4,6,7 },
	{ 1,2,3,4,6,7 },{ 0,1,2,3,4,6,7 },{ 5,6,7 },{ 0,5,6,7 },
	{ 1,5,6,7 },{ 0,1,5,6,7 },{ 2,5,6,7 },{ 0,2,5,6,7 },
	{ 1,2,5,6,7 },{ 0,1,2,5,6,7 },{ 3,5,6,7 },{ 0,3,5,6,7 },
	{ 1,3,5,6,7 },{ 0,1,3,5,6,7 },{ 2,3,5,6,7 },
	{ 0,2,3,5,6,7 },{ 1,2,3,5,6,7 },{ 0,1,2,3,5,6,7 },
	{ 4,5,6,7 },{ 0,4,5,6,7 },{ 1,4,5,6,7 },{ 0,1,4,5,6,7 },
	{ 2,4,5,6,7 },{ 0,2,4,5,6,7 },{ 1,2,4,5,6,7 },
	{ 0,1,2,4,5,6,7 },{ 3,4,5,6,7 },{ 0,3,4,5,6,7 },
	{ 1,3,4,5,6,7 },{ 0,1,3,4,5,6,7 },{ 2,3,4,5,6,7 },
	{ 0,2,3,4,5,6,7 },{ 1,2,3,4,5,6,7 },{ 0,1,2,3,4,5,6,7 }
};

// ----------------------------
//         bitboard
// ----------------------------

// 盤面であるビットを表すbitboard
const Bitboard SQUARE(0xfffffffffffffff);

// 各段(1~3)を表すbitboard
const std::array<Bitboard, 3> STAGES{
	bb(0xfffff << 0),
	bb(0xfffff << 20),
	bb(0xfffff << 40)
};

// 各列(A~D)を表すbitboard
const std::array<Bitboard, 4> COLUMNS{
	bb(0x1f0001f0001f << 0),
	bb(0x1f0001f0001f << 5),
	bb(0x1f0001f0001f << 10),
	bb(0x1f0001f0001f << 15)
};

// 各行(a~e)を表すbitboard
const std::array<Bitboard, 5> ROWS{
	bb(0x84210842108421 << 0),
	bb(0x84210842108421 << 1),
	bb(0x84210842108421 << 2),
	bb(0x84210842108421 << 3),
	bb(0x84210842108421 << 4)
};

// 空母の位置を表すbitboard
// 0:先手, 1:後手, 2:先後両方
const std::array<Bitboard, 3> CARRIER{
	bb(0x4200000000000),
	bb(0x46200000000000),
	bb(0x48000000000000)
};

// 各駒の初期位置(pieces)を表すbitboardの配列
const std::array<Bitboard, PIECE_KIND * 2> INITIAL_PIECES{
	bb(0x20000200),
	bb(0x400004000),
	bb(0x108000000010),
	bb(0x800000001080000),
	bb(0x40000400),
	bb(0x2000020),
	bb(0x80000000108000),
	bb(0x10800000001)
};

// TRAVEL[piece(SE,SH,SF,SC)][square(0~59)]で
// 指定した駒/マスの移動範囲をbitboardで返す
const std::array<std::array<Bitboard, SQ_NUM>, PIECE_KIND> TRAVEL_TABLE{

	// イーグル
	{bb(0x2300022), bb(0x6700065), bb(0xce000ca), bb(0x19c00194),
	 bb(0x31800308), bb(0x46100441), bb(0xce300ca3), bb(0x19c601946),
	 bb(0x338c0328c), bb(0x631806118), bb(0x8c2008820), bb(0x19c6019460),
	 bb(0x338c0328c0), bb(0x6718065180), bb(0xc6300c2300), bb(0x1840010400),
	 bb(0x38c0028c00), bb(0x7180051800), bb(0xe3000a3000), bb(0xc600046000),
	 bb(0x230002200023), bb(0x670006500067), bb(0xce000ca000ce),
	 bb(0x19c001940019c), bb(0x3180030800318), bb(0x4610044100461),
	 bb(0xce300ca300ce3), bb(0x19c601946019c6), bb(0x338c0328c0338c),
	 bb(0x63180611806318), bb(0x8c200882008c20), bb(0x19c601946019c60),
	 bb(0x338c0328c0338c0), bb(0x671806518067180), bb(0xc6300c2300c6300),
	 bb(0x184001040018400), bb(0x38c0028c0038c00), bb(0x718005180071800),
	 bb(0xe3000a3000e3000), bb(0xc600046000c6000), bb(0x220002300000),
	 bb(0x650006700000), bb(0xca000ce00000), bb(0x1940019c00000),
	 bb(0x3080031800000), bb(0x4410046100000), bb(0xca300ce300000),
	 bb(0x1946019c600000), bb(0x328c0338c00000), bb(0x61180631800000),
	 bb(0x882008c2000000), bb(0x1946019c6000000), bb(0x328c0338c000000),
	 bb(0x651806718000000), bb(0xc2300c630000000), bb(0x104001840000000),
	 bb(0x28c0038c0000000), bb(0x518007180000000), bb(0xa3000e300000000),
	 bb(0x46000c600000000) },

	 // ホーク
	 {bb(0x4100040), bb(0xa3000a1), bb(0x14600142), bb(0x28c00284),
	  bb(0x11800108), bb(0x82200802), bb(0x146501425), bb(0x28ca0284a),
	  bb(0x519405094), bb(0x230802108), bb(0x1044010040), bb(0x28ca0284a0),
	  bb(0x5194050940), bb(0xa3280a1280), bb(0x4610042100), bb(0x880000800),
	  bb(0x1940009400), bb(0x3280012800), bb(0x6500025000), bb(0xc200042000),
	  bb(0x410004000041), bb(0xa3000a1000a3), bb(0x1460014200146),
	  bb(0x28c002840028c), bb(0x1180010800118), bb(0x8220080200822),
	  bb(0x14650142501465), bb(0x28ca0284a028ca), bb(0x51940509405194),
	  bb(0x23080210802308), bb(0x104401004010440), bb(0x28ca0284a028ca0),
	  bb(0x519405094051940), bb(0xa3280a1280a3280), bb(0x461004210046100),
	  bb(0x88000080008800), bb(0x194000940019400), bb(0x328001280032800),
	  bb(0x650002500065000), bb(0xc200042000c2000), bb(0x400004100000),
	  bb(0xa1000a300000), bb(0x1420014600000), bb(0x2840028c00000),
	  bb(0x1080011800000), bb(0x8020082200000), bb(0x14250146500000),
	  bb(0x284a028ca00000), bb(0x50940519400000), bb(0x21080230800000),
	  bb(0x100401044000000), bb(0x284a028ca000000), bb(0x509405194000000),
	  bb(0xa1280a328000000), bb(0x421004610000000), bb(0x8000880000000),
	  bb(0x94001940000000), bb(0x128003280000000), bb(0x250006500000000),
	  bb(0x42000c200000000) },

	  // ファルコン
	  {bb(0x2300022), bb(0x4700045), bb(0x8f0008b), bb(0x11e00116),
	   bb(0x21c0020c), bb(0x46100441), bb(0x8e2008a2), bb(0x11e401164),
	   bb(0x23c8022c8), bb(0x439004190), bb(0x8c2008820), bb(0x11c4011440),
	   bb(0x23c8022c80), bb(0x4790045900), bb(0x8720083200), bb(0x1840010400),
	   bb(0x3880028800), bb(0x7900059000), bb(0xf2000b2000), bb(0xe400064000),
	   bb(0x230002200023), bb(0x470004500047), bb(0x8f0008b0008f),
	   bb(0x11e001160011e), bb(0x21c0020c0021c), bb(0x4610044100461),
	   bb(0x8e2008a2008e2), bb(0x11e401164011e4), bb(0x23c8022c8023c8),
	   bb(0x43900419004390), bb(0x8c200882008c20), bb(0x11c401144011c40),
	   bb(0x23c8022c8023c80), bb(0x479004590047900), bb(0x872008320087200),
	   bb(0x184001040018400), bb(0x388002880038800), bb(0x790005900079000),
	   bb(0xf2000b2000f2000), bb(0xe400064000e4000), bb(0x220002300000),
	   bb(0x450004700000), bb(0x8b0008f00000), bb(0x1160011e00000),
	   bb(0x20c0021c00000), bb(0x4410046100000), bb(0x8a2008e200000),
	   bb(0x1164011e400000), bb(0x22c8023c800000), bb(0x41900439000000),
	   bb(0x882008c2000000), bb(0x1144011c4000000), bb(0x22c8023c8000000),
	   bb(0x459004790000000), bb(0x832008720000000), bb(0x104001840000000),
	   bb(0x288003880000000), bb(0x590007900000000), bb(0xb2000f200000000),
	   bb(0x64000e400000000) },

	   // クロウ
	   {bb(0x2300022), bb(0x4700045), bb(0x8e0008a), bb(0x11c00114),
	   bb(0x21800208), bb(0x46100441), bb(0x8e2008a2), bb(0x11c401144),
	   bb(0x238802288), bb(0x431004110), bb(0x8c2008820), bb(0x11c4011440),
	   bb(0x2388022880), bb(0x4710045100), bb(0x8620082200), bb(0x1840010400),
	   bb(0x3880028800), bb(0x7100051000), bb(0xe2000a2000), bb(0xc400044000),
	   bb(0x230002200023), bb(0x470004500047), bb(0x8e0008a0008e),
	   bb(0x11c001140011c), bb(0x2180020800218), bb(0x4610044100461),
	   bb(0x8e2008a2008e2), bb(0x11c401144011c4), bb(0x23880228802388),
	   bb(0x43100411004310), bb(0x8c200882008c20), bb(0x11c401144011c40),
	   bb(0x238802288023880), bb(0x471004510047100), bb(0x862008220086200),
	   bb(0x184001040018400), bb(0x388002880038800), bb(0x710005100071000),
	   bb(0xe2000a2000e2000), bb(0xc400044000c4000), bb(0x220002300000),
	   bb(0x450004700000), bb(0x8a0008e00000), bb(0x1140011c00000),
	   bb(0x2080021800000), bb(0x4410046100000), bb(0x8a2008e200000),
	   bb(0x1144011c400000), bb(0x22880238800000), bb(0x41100431000000),
	   bb(0x882008c2000000), bb(0x1144011c4000000), bb(0x228802388000000),
	   bb(0x451004710000000), bb(0x822008620000000), bb(0x104001840000000),
	   bb(0x288003880000000), bb(0x510007100000000), bb(0xa2000e200000000),
	   bb(0x44000c400000000) }
};

// SHOOT[piece(SE,SH,SF,SC)][square(0~59)]で
// 指定した駒/マスの射程をbitboardで返す
const std::array<std::array<Bitboard, SQ_NUM>, PIECE_KIND> SHOOT_TABLE{

	// イーグル
	{bb(0x100020), bb(0x200041), bb(0x400082), bb(0x800104), bb(0x1000208),
	 bb(0x2000401), bb(0x4000822), bb(0x8001044), bb(0x10002088),
	 bb(0x20004110), bb(0x40008020), bb(0x80010440), bb(0x100020880),
	 bb(0x200041100), bb(0x400082200), bb(0x800000400), bb(0x1000008800),
	 bb(0x2000011000), bb(0x4000022000), bb(0x8000044000), bb(0x10002000000),
	 bb(0x20004100000), bb(0x40008200000), bb(0x80010400000), bb(0x100020800000),
	 bb(0x200040100000), bb(0x400082200000), bb(0x800104400000),
	 bb(0x1000208800000), bb(0x2000411000000), bb(0x4000802000000),
	 bb(0x8001044000000), bb(0x10002088000000), bb(0x20004110000000),
	 bb(0x40008220000000), bb(0x80000040000000), bb(0x100000880000000),
	 bb(0x200001100000000), bb(0x400002200000000), bb(0x800004400000000),
	 bb(0x200000000000), bb(0x410000000000), bb(0x820000000000),
	 bb(0x1040000000000), bb(0x2080000000000), bb(0x4010000000000),
	 bb(0x8220000000000), bb(0x10440000000000), bb(0x20880000000000),
	 bb(0x41100000000000), bb(0x80200000000000), bb(0x104400000000000),
	 bb(0x208800000000000), bb(0x411000000000000), bb(0x822000000000000),
	 bb(0x4000000000000), bb(0x88000000000000), bb(0x110000000000000),
	 bb(0x220000000000000), bb(0x440000000000000) },

	 // ホーク
	 {bb(0x100000), bb(0x200021), bb(0x400042), bb(0x800084), bb(0x1000108),
	  bb(0x2000000), bb(0x4000421), bb(0x8000842), bb(0x10001084),
	  bb(0x20002108), bb(0x40000000), bb(0x80008420), bb(0x100010840),
	  bb(0x200021080), bb(0x400042100), bb(0x800000000), bb(0x1000008400),
	  bb(0x2000010800), bb(0x4000021000), bb(0x8000042000), bb(0x10000000000),
	  bb(0x20002100000), bb(0x40004200000), bb(0x80008400000), bb(0x100010800000),
	  bb(0x200000000000), bb(0x400042100000), bb(0x800084200000),
	  bb(0x1000108400000), bb(0x2000210800000), bb(0x4000000000000),
	  bb(0x8000842000000), bb(0x10001084000000), bb(0x20002108000000),
	  bb(0x40004210000000), bb(0x80000000000000), bb(0x100000840000000),
	  bb(0x200001080000000), bb(0x400002100000000), bb(0x800004200000000),
	  bb(0x0), bb(0x210000000000), bb(0x420000000000), bb(0x840000000000),
	  bb(0x1080000000000), bb(0x0), bb(0x4210000000000), bb(0x8420000000000),
	  bb(0x10840000000000), bb(0x21080000000000), bb(0x0), bb(0x84200000000000),
	  bb(0x108400000000000), bb(0x210800000000000), bb(0x421000000000000),
	  bb(0x0), bb(0x84000000000000), bb(0x108000000000000),
	  bb(0x210000000000000), bb(0x420000000000000) },

	  // ファルコン
	  {bb(0x0), bb(0x1), bb(0x3), bb(0x6), bb(0xc), bb(0x0), bb(0x20), bb(0x60),
	   bb(0xc0), bb(0x180), bb(0x0), bb(0x400), bb(0xc00), bb(0x1800), bb(0x3000),
	   bb(0x0), bb(0x8000), bb(0x18000), bb(0x30000), bb(0x60000), bb(0x0),
	   bb(0x100000), bb(0x300000), bb(0x600000), bb(0xc00000), bb(0x0),
	   bb(0x2000000), bb(0x6000000), bb(0xc000000), bb(0x18000000), bb(0x0),
	   bb(0x40000000), bb(0xc0000000), bb(0x180000000), bb(0x300000000), bb(0x0),
	   bb(0x800000000), bb(0x1800000000), bb(0x3000000000), bb(0x6000000000),
	   bb(0x0), bb(0x10000000000), bb(0x30000000000), bb(0x60000000000),
	   bb(0xc0000000000), bb(0x0), bb(0x200000000000), bb(0x600000000000),
	   bb(0xc00000000000), bb(0x1800000000000), bb(0x0), bb(0x4000000000000),
	   bb(0xc000000000000), bb(0x18000000000000), bb(0x30000000000000),
	   bb(0x0), bb(0x80000000000000), bb(0x180000000000000),
	   bb(0x300000000000000), bb(0x600000000000000) },

	   // クロウ
	   {bb(0x0), bb(0x0), bb(0x21), bb(0x42), bb(0x84), bb(0x0), bb(0x0),
		bb(0x421), bb(0x842), bb(0x1084), bb(0x0), bb(0x0), bb(0x8420),
		bb(0x10840), bb(0x21080), bb(0x0), bb(0x0), bb(0x8400), bb(0x10800),
		bb(0x21000), bb(0x0), bb(0x0), bb(0x2100000), bb(0x4200000), bb(0x8400000),
		bb(0x0), bb(0x0), bb(0x42100000), bb(0x84200000), bb(0x108400000), bb(0x0),
		bb(0x0), bb(0x842000000), bb(0x1084000000), bb(0x2108000000), bb(0x0),
		bb(0x0), bb(0x840000000), bb(0x1080000000), bb(0x2100000000), bb(0x0),
		bb(0x0), bb(0x210000000000), bb(0x420000000000), bb(0x840000000000),
		bb(0x0), bb(0x0), bb(0x4210000000000), bb(0x8420000000000),
		bb(0x10840000000000), bb(0x0), bb(0x0), bb(0x84200000000000),
		bb(0x108400000000000), bb(0x210800000000000), bb(0x0), bb(0x0),
		bb(0x84000000000000), bb(0x108000000000000), bb(0x210000000000000) }
};

// ----------------------------
//      ハッシュ値/乱数表
// ----------------------------

// 初期局面
const unsigned __int64 INITIAL_HASH;

// 駒とマスに対応する乱数表
// RAND_P_SQ[PIECE][SQ]
const std::array<std::array<__int64, SQ_NUM>, PIECE_KIND> RAND_P_SQ{

	{0xdacb112b4246b296, 0xf327484870321101,
	 0x86babc1ec951dc5a, 0x81ddc2f47a7f73db,
	 0xc9cca6794ebcff92, 0x3ef27b1ed9c24ad1,
	 0xd44a050ba558b1b6, 0xb3db728189f6dce3,
	 0x00b7492b73beaa53, 0x06f3669d00aaa731,
	 0x1fa436da734e47f7, 0x896352ebcb322dc3,
	 0x3e520f82c5aa7123, 0x240d5eebcfca5b61,
	 0x6e4340f416894afd, 0x29806c17390ef9f3,
	 0x41cfe4c8b40d437d, 0x6298cf21c08b4e85,
	 0x69c77d94cb4958e5, 0x7a1234cb875ffbb5,
	 0xa7bb70d7353fb5af, 0xd6dc73554c2278ad,
	 0x8169a5e434698b7f, 0x9e6313f46185ba18,
	 0x59cb9453e61886a0, 0x12c04b6a5d2c9cd9,
	 0x8a82c2fadb351997, 0x474eca102b88e06d,
	 0xec2d0b1149fc3b5b, 0xe3643578fc9b7442,
	 0x0f97c598d7147a19, 0x61f657a8da684d02,
	 0xaf35f6ff9aacf2c9, 0xd3ca59705a0cf7d3,
	 0x2fe2a3f8d5317b95, 0x4e53619670d2d265,
	 0x1f62d3688bd281f2, 0x8556fe5ae43fcf88,
	 0x9d19da34e91cca5f, 0x425adb03c7da53b2,
	 0x0aa25a2d6d175076, 0x3b57a94ef96a3c0d,
	 0x0cf49bb943413593, 0x799167259cf1660c,
	 0xcde9215b645e3dda, 0xf7ea6e6b95d2020d,
	 0x4e0c47c0c5163b10, 0x7991161953ab548e,
	 0x0dd6a0d459c20eeb, 0x83d1ee4879b60d65,
	 0x82abfb8764ceafef, 0x87dfe86f445d06bc,
	 0xbca772e0a5850a74, 0x08bf114673d44a78,
	 0x21e218c85270540c, 0x043d190a5aecc1cf,
	 0x13e085e3d7deedf1, 0x361b0dc3cf972599,
	 0xe9b2cee5ffce7b75, 0x18ccf3500fa8d78b },

	{0x96bbaf8cb0d8dacc, 0x64b30917325f4c4a,
	 0x3951491385992956, 0x6b3cba7568772bc0,
	 0xf5cb512d0fe53d32, 0x23aed3a267d4bc86,
	 0x8442569b70e346c9, 0x7173942cfb033619,
	 0x66be4b8926554270, 0x65574ad0da96a638,
	 0xdc6b9dd8c577ce88, 0x837defb11187d055,
	 0x00aeecb89f7399f2, 0xf1358e4f5afba846,
	 0x7e38a5c9da21f426, 0x00a20e13c0be9e0b,
	 0x97c29592fd1e7165, 0x388fcbb8f8083a5d,
	 0xf54716a7736c4b74, 0x8a2b128f5c349efd,
	 0x425bd0def0ec126d, 0xe24af19ab3a57e6c,
	 0x9100c63a9e596196, 0x63604c49f0a54286,
	 0xb05fdb9e6cf21d7e, 0xf845273b104abc61,
	 0x71831c062fce85a7, 0x0684f6870a3dbb25,
	 0xd3a38b36bd0390ed, 0x0f9119b716d7d1eb,
	 0x12b3df2517e1257d, 0x1b450f82c18034d9,
	 0x73db5b3fb231188e, 0xbee1e50d9fe0282c,
	 0x9b6449837646a90c, 0x0695f1ac4a5c557c,
	 0xd9a48d1e435e7de1, 0x58aff08f2a22b812,
	 0x00a0268fed8a8473, 0x604120adb192ce69,
	 0x9fe4f6d223b9cb8c, 0xecbcbb0a4a3a04e7,
	 0x912bc725ab6388b7, 0xe496d4efe2753c5f,
	 0x3117322a832db10a, 0x13487931a103ce04,
	 0x69185a883cf57115, 0x5f4d5537e99112a6,
	 0x4aa5d5bc87b1fc06, 0x8934194ad2ceb767,
	 0xdba11f2fd2bb0b78, 0x31b7745019decae8,
	 0xa7e0d5b1dce721cf, 0xa5552cdb5f061b20,
	 0x6c3ba5cc931239f7, 0xbdc4950ca0288348,
	 0xe8b4f4a28b2c2bab, 0x0b2871db42ef4595,
	 0x61360eaa02d3dc15, 0xac07c6ce30abc147 },

	{0xe3e9fa1f7097b6eb, 0xa082ce7542cc8d18,
	 0x5ab1a41ffaf6b0af, 0x3cc64dbcb15b68ea,
	 0x4688ba25ca6069c0, 0x479fd2a3286bfdbc,
	 0xfe8cd901dd1accc3, 0x5430619206e6f703,
	 0x7211398a8faddd00, 0xc4d55e21f51c6b66,
	 0x1761f973657a46d7, 0xd505454f94cbb8cc,
	 0x241f871189dd1f8c, 0x509617f850ab80a5,
	 0xc386bef8b6b73469, 0x37c62d32cc2a7461,
	 0xa746145467a1b837, 0x1879032a0b2b8f81,
	 0x07e710990687dc2c, 0xd442bda13ee4d543,
	 0xa14b6a4c4ada6723, 0xa67915adb462cb84,
	 0x87102c0dd987c204, 0x0e2e29dd92b2b943,
	 0x4629f851359bb315, 0x86c66af8a9dc11cd,
	 0x5215628e0f5605b6, 0x4124a4a80acba55e,
	 0xaca940618500583e, 0xdf41054a7e0cdeea,
	 0x12d16ac12002931d, 0x9cf3171884dfe991,
	 0x118cb7ff8be1414c, 0xdadc17c47ab48c55,
	 0x20abd0ab76eb9eea, 0x4f48a8d2bc6b1ee9,
	 0x48cb0daf3214dc1a, 0xcdd669f2e24e2868,
	 0x3fccf85ff3005a3e, 0xdb84e264d60b470e,
	 0xfd917f2d251f9b8f, 0x6bbcb1239d07cd86,
	 0xe0c930bc01dbf7ba, 0xfec4ba9b17e4a045,
	 0x8086a2bc2bf2b9e5, 0xd1d563d1178acc78,
	 0x7ff72532dffd460f, 0xd21a0371a9c22cda,
	 0xb42a986ccdcca99c, 0x6a83879d8011c043,
	 0x5c39dc09ab05393d, 0x6a4a070443761c03,
	 0x9f2ab8a337119310, 0xae5033b7ea66eb19,
	 0x050ba572868ceb96, 0x304cd3c2a7d44864,
	 0x04f5fe882d93b077, 0xb3d4f138a6cc9006,
	 0x4064a0a313e40ac6, 0x329bc15b9c437d6c},

	{0x37c7dcb5faf13ad2, 0x3a9006efa0025cc3,
	 0x39ee988fa196053e, 0x5a280eac2e527736,
	 0xe55702b35770837f, 0x1ccb96ab33971f0e,
	 0xc56ac5a4544b4b53, 0x90565b5c0d809737,
	 0x157ce7f172a9bb49, 0x43e211e61782dae6,
	 0x0b4b6d4f1c131422, 0x80ca9ca7d5ae662e,
	 0x18691a38f54b297a, 0xda19390f9fa7cbc2,
	 0xc6753bd8af30cffc, 0xc8e3c50413b81b6b,
	 0x25d85ee849341d17, 0xb44a7e4f7849f062,
	 0x148799ad400bdf9a, 0x598326650b2e9f01,
	 0x3b8e38179a4558d3, 0x4cbe6a1cd09669a2,
	 0x7571441f7f0531ee, 0x755f1173be67746c,
	 0x4789e7b6ac303cd5, 0x8c9666a0fbaef721,
	 0xc86fe654ecd60b84, 0x809fd6c73ab1d43b,
	 0xb1ceded349fd0895, 0x1dadec7252e3fa97,
	 0x4154723f5f56d499, 0xa65263e591bc401d,
	 0x1081fccedb30671c, 0x891a3c3228e3e2af,
	 0xcbcd2de0a181d9a8, 0xcd22538ce1525862,
	 0xc85e67c39d205977, 0x612e0e8061c740f6,
	 0xd83d728e6a1318e7, 0xcbaf5c08ae6db869,
	 0xe9e26c5033acb784, 0x8cdaed94339a3dc9,
	 0x8daf27c5801778bf, 0x7de366d7d8c3a932,
	 0x2f7182cb6760d38b, 0xb3ad7648824c8195,
	 0x4cc071f0448b9c0c, 0x522f3648d938b06f,
	 0x7b4d119779557127, 0x6c744ce954175452,
	 0x29be1098d8a4dbb4, 0xb06e733a41a38ec9,
	 0x2877d7259e76999e, 0x2ab98be1e2344ae9,
	 0x9ee2abcccd4aa3a0, 0x2dbfa1e06a5a2b67,
	 0x77ddbbd812857134, 0xde9ee228e4b705d6,
	 0xfe52aa5ce241c9b4, 0x778fce5c046ce2f9},

	{0xcad3d1aaec8be054, 0x58b0102bce1360a9,
	 0x84a7fb2af6a1535b, 0x257296a6eb52668e,
	 0xc54a1c6982d4da12, 0x683225ee28491404,
	 0x4ddd3905f10fc50f, 0x84667867ed3e4edb,
	 0xf58c4b2f8e72531a, 0xa543ae06d4ac03b8,
	 0xe93190e3d816854a, 0x9813be2cbcd93a90,
	 0x0089d5abffd4696e, 0xe22f34fe270e68e2,
	 0xa6264a4d3ca8ec1e, 0x3e4ec1d81c047778,
	 0x805cc5108e329751, 0xc60e47f857cf14de,
	 0x7d29870a6281b080, 0xe017e54c220262d2,
	 0x8f3b23f46c6e319b, 0xf7f7c1a9ea61b46b,
	 0x4dd6513cd6f8e30d, 0x9d47e84d81862097,
	 0xb1a652471af6249c, 0x668ba7c3ebda29af,
	 0xa858fc758e05ece3, 0x9a3e17b96ad4fc7a,
	 0x78901e73a6b3dade, 0x74ed06c358cba3a1,
	 0xac77958f134aae05, 0x85be3dd9903945d1,
	 0x1e83c39b51f52438, 0xd14772d1bae8ad59,
	 0x2ad315e5ba7bb0de, 0x65211ad26ce09642,
	 0xeab8a8a81420cb01, 0x82bcadcc0febb1be,
	 0x9905ac2375c907f9, 0x78763a2c363b3cad,
	 0x28f3149abb617292, 0xee82a81442223471,
	 0x830c4a751795ea99, 0xa9b7d3cb4d084a77,
	 0x63dfd4286de73c2c, 0x7734fcf1eb5e69ed,
	 0x564de7b3097bd753, 0xd4dc9321e88bef4a,
	 0xac0b58adb81f1ab5, 0x97f11b86a4ea5105,
	 0x3ceccf3bd45e296a, 0xa18be414e8b660f0,
	 0x7356ec1817aa3727, 0x5daeff7fce22d356,
	 0x7e6799cde3779914, 0x735542c6b76b87f9,
	 0xd7de96c1b2e6bd12, 0x95eb10aca8b0cd15,
	 0x5c8b4138fd5ae1a3, 0x17b99619d3612b01},

	{0x5dd811151cb57b06, 0x615022d237df1b29,
	 0x85fd19c05e5c9ee2, 0x7b163a260bcaeb4c,
	 0xbfae7427bb503838, 0x28c934b959bf51ab,
	 0x04bc15245adc08d0, 0xac5a559c290209fb,
	 0xfc2ab77276e8b4eb, 0xb1885105036cee51,
	 0xf5f460edd8b62cc9, 0x237e34c94faffd8b,
	 0x7e1a116d38119a5e, 0xc3fd3e92df1757bd,
	 0x2da1e24b1fe25887, 0x705e984f2537f1a0,
	 0xe14e53490065ff38, 0x8623edf9bc99af2f,
	 0x95508d78f1bad87b, 0xc87ec30daa9f98f6,
	 0x948a000a0e598617, 0x3d4233e7e2f80b8f,
	 0x765d8e91103a2f48, 0x15a53fcd0aef3b1b,
	 0x4fcff4273d5284d9, 0x75a5e7a0cc7929fe,
	 0x77c75f662a341460, 0x6595b9f409bd7bc1,
	 0xb4c250ec08fc0d60, 0x88839aa39f4a693e,
	 0x87e7b6f0d2b1b29f, 0x2c908abb38b5b392,
	 0x098d023d4202645a, 0xec2f1f93a72c4d35,
	 0xd8cfb637b97884be, 0xb59d49c491da1fb2,
	 0x7b662b09941e2959, 0xc00297efd4721863,
	 0xbd5bf100ec94e73c, 0x21034aac9c9de25c,
	 0x75198d5bd4476ceb, 0xbd531609e1ca3832,
	 0xaf13f8cfe3a61946, 0x6458ea7f15be7098,
	 0x28665f1d75034a60, 0xbfb4f650c3ef7d6e,
	 0xdbc31ab49ef81281, 0x866cd0bed29b0d17,
	 0xb4a888a1c729b6fa, 0xce1a9a1e72006487,
	 0x36c15658f7d3b6da, 0xad4154c4d7a79796,
	 0x216600373859bad1, 0xee9f1f5f4d13ed77,
	 0x22048023017564fe, 0xaeeea797bffc15df,
	 0x64613212d6b280cf, 0x2404a48128c2209f,
	 0x703f4e9657fc1921, 0x59de70c06541e07f},

	{0x52f211c7f67ea596, 0x759eb1e4a4727773,
	 0xb89a90176f77a6fe, 0x9741ef662745246,
	 0x1a695e217b1296e2, 0x280e521c3e5b1434,
	 0xe85e6fa6c775179c, 0x9a4ad340263c9db5,
	 0xad40354e55df4194, 0x7be7c00be5a152de,
	 0x23cee732ada815a, 0x228943c6dcd0bc96,
	 0xe6880e3dcd964876, 0xc530caa99c1fbc5b,
	 0xff9b875d7ef26755, 0xfe997134e084ac44,
	 0xc21cf9ec47ef48b7, 0xae3195a80f42513a,
	 0xea52bd672340fbf4, 0xf63030e338cde5df,
	 0x7a2a81f71d2440f4, 0x3f7aee7b860a66f6,
	 0xc74b2f496abb00ce, 0x2aa6f5ebce1da063,
	 0xb03d46f458db6815, 0x1734b94cfa592ef3,
	 0xee2230e853f59ad8, 0xe5bd06bd3db484d9,
	 0xa0ebe82a79052c89, 0x389c91f2c610a8bb,
	 0xfc90bceb854569c5, 0x5f93d14f5905c341,
	 0x5ecafdc7f275f7bf, 0x6305381f0fd3408b,
	 0xec0780c6153044d7, 0x6fe8cf2662c6ecab,
	 0x16917debddac1d36, 0x8de3c852651beab5,
	 0x5122ed9f8e06936c, 0x227db8f6dae1f194,
	 0x11027cb45eec626f, 0x5834875ab34d8d56,
	 0xb95d5e23d0a0b765, 0xf53ca0bf4e1cff19,
	 0xad43dde6ec5531b5, 0xd5d2eb68225b7705,
	 0xff50b30c6918dffa, 0x8022d97be2252bfb,
	 0xb458e2e573075826, 0x4e41a1ac28e3ab43,
	 0x82f476b25524eb59, 0x901a96965e64751b,
	 0xff8975bf6de1f604, 0xd09e1c02d4fc77bf,
	 0xffcdc3a35f8ae495, 0xc220fa6c6ce3e9fe,
	 0xa5d431f3ecc5bba3, 0xc2c91d84fd3260e8,
	 0x37da4a5265ab517a, 0x915c79e0583ec129},

	{0x002576331fec94a8, 0x81b7ccca2d6cec73,
	 0x40acf3c807319023, 0xc1824d5c32e5ca6b,
	 0x899148b3b7985e79, 0x8976a359cf39f26d,
	 0x31faa6f855589f0a, 0x3faa65586c20e959,
	 0x266304b9551a3ac3, 0x070e48cd6822b419,
	 0x0c7cf41a206e5c78, 0xdaf4ae83c6e6bfc1,
	 0xf721f64be1123b2b, 0x60492f8c9e33810f,
	 0xf5ade09ceb4638cc, 0x6663cc811e2cb755,
	 0x07444f78e5255266, 0xdba39bc452bd1f2b,
	 0x1cd38b5eddf4a0f5, 0xa118d0e07dd3cc2d,
	 0xf68ed7db384b411c, 0x680cf6ed0bc56cfe,
	 0xca610c7c0c5b3531, 0x66ee1161d5833097,
	 0xc2251f6faac49cd0, 0x547bea39d1362746,
	 0xa20573aea9b27970, 0x39a19014b0d114d9,
	 0x47e9c9f21e8ec317, 0xba43064b1983de42,
	 0x7084fb6a9fcca475, 0x09ffca35d8ae7c47,
	 0x6207bd562c74b94e, 0xc98d7391320da10f,
	 0x213a31c58cb04acc, 0x059a00e22a6c77b9,
	 0x1501512c5c26366a, 0xb1fca948e148eb89,
	 0xfb2a807ef201b735, 0xabe87d12fdf4728a,
	 0x114450115abe54e1, 0xd8bc2f33439470f2,
	 0x7d10f60310fbf968, 0x24de217bb53b096c,
	 0x3fec3fdb2d257b28, 0x1a2831e81d703bba,
	 0x76d806ebb30222fe, 0xa82114ede4c5008c,
	 0x5d9c0d74183fd4b8, 0xc1ab233322fdaf22,
	 0x107c8ff897e5ba34, 0xed0aae3f078403e6,
	 0xedb08361cee3e1ce, 0x1d6ff4bf66a3df71,
	 0xd9e1a0152e86d54a, 0x0723a49fa1a62048,
	 0x28eb194349b37cfb, 0x6b8728dad3884d7a,
	 0x5967d60a9cf79725, 0x54dda2f5163dbc67}
};

// 駒の種類に対応する乱数表
// 射撃で駒がなくなるときに、値を引く
const std::array<unsigned __int64, PIECE_KIND> RAND_P{
	0xc4f91ed2b2e23caf, 0x1578d76b669d366c,
	0xe642e5a470d791b7, 0x98f6c4640f93606b
};

// 手番を相手番にする乱数
const unsigned __int64 TURN_HASH = 0x3d5bf96df26e4d5e;


#endif // _BB_TABLE_H_